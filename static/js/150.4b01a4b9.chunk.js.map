{"version":3,"file":"static/js/150.4b01a4b9.chunk.js","mappings":"+SAEaA,EAAcC,EAAAA,EAAAA,QAAH,iGAOXC,EAASD,EAAAA,EAAAA,IAAH,iFAMNE,EAAYF,EAAAA,EAAAA,IAAH,0GAOTG,EAAQH,EAAAA,EAAAA,GAAH,sCAILI,EAAWJ,EAAAA,EAAAA,GAAH,yDAKRK,EAAOL,EAAAA,EAAAA,EAAH,oGAOJM,EAAUN,EAAAA,EAAAA,GAAH,gF,SCzBPO,EAAY,SAAC,GASnB,IAAD,IARJC,aACEC,EAOE,EAPFA,YACAC,EAME,EANFA,OACAC,EAKE,EALFA,SACAC,EAIE,EAJFA,aACAC,EAGE,EAHFA,MACAC,EAEE,EAFFA,aAGIC,EAAcL,EAAOM,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MAEzD,OACE,iCACE,UAACpB,EAAD,YACE,SAACE,EAAD,CAAQmB,IAAG,UAAKC,EAAAA,GAAL,OAAkBZ,GAAea,IAAKT,KACjD,UAACX,EAAD,YACE,UAACC,EAAD,eAASU,EAAT,QACA,UAACT,EAAD,2BAEE,SAACC,EAAD,WAAOkB,EAAAA,EAAAA,GAAO,IAAIC,KAAKZ,GAAe,qBAExC,UAACR,EAAD,0BAAuBqB,KAAKC,MAAqB,GAAfZ,GAAlC,QACA,UAACV,EAAD,wBAEE,SAACC,EAAD,UAAOM,QAET,UAACP,EAAD,sBAEE,SAACC,EAAD,UAAOU,cAIb,SAACT,EAAD,uCAGL,E,UC7CYqB,EAAe,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SACjC,OAAO,SAACC,EAAD,CAAcF,GAAIA,EAAlB,SAAuBC,GAC/B,EAMYC,GAAe9B,EAAAA,EAAAA,GAAO+B,EAAAA,GAAP/B,CAAH,2kBA2BZgC,EAAiBhC,EAAAA,EAAAA,IAAH,oGAOdiC,GAAWjC,EAAAA,EAAAA,GAAOkC,EAAAA,GAAPlC,CAAH,mhBCrCRmC,EAAe,WAC1B,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,YAAxC,eAAO9B,EAAP,KAAqB+B,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,MAGbC,EAAW,GAWf,OATEA,EAD0B,OAFRC,EAAAA,EAAAA,QAAOH,EAASI,MAAMC,KAAKC,UAAY,MAE3CC,QACH,IACK,WAElBC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,eAAmBb,GAChBc,MAAK,SAAAC,GAAK,OAAIZ,EAAgBY,EAApB,IACVC,OAAM,kBAAMC,EAAAA,GAAAA,MAAY,6CAAlB,GACV,GAAE,CAACjB,KAGF,iCACE,UAAC,EAAAkB,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACG/C,IAAgB,SAACmB,EAAD,CAAcC,GAAIc,EAAlB,4BAChBlC,IAAgB,SAACD,EAAD,CAAWC,aAAcA,KAC1C,UAACwB,EAAD,YACE,SAACC,EAAD,CAAUL,GAAE,kBAAaQ,EAAb,SAA6BQ,MAAO,CAAEC,KAAML,GAAxD,mBAGA,SAACP,EAAD,CACEL,GAAE,kBAAaQ,EAAb,YACFQ,MAAO,CAAEC,KAAML,GAFjB,4BAQJ,SAAC,EAAAc,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,OAEF,SAAC,KAAD,CAAgBC,UAAW,QAGhC,C,uDClDM,IAAMnC,EAAa,qC","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx","utils/posterUrl.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CardWrapper = styled.section`\n  display: flex;\n  gap: 20px;\n  padding: 20px;\n  padding-left: 40px;\n`;\n\nexport const Poster = styled.img`\n  display: block;\n  max-width: 220px;\n  height: 100%;\n`;\n\nexport const MovieInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding-left: 40px;\n`;\n\nexport const Title = styled.h1`\n  margin: 0;\n`;\n\nexport const Subtitle = styled.h2`\n  color: inherit;\n  margin: 0;\n`;\n\nexport const Text = styled.p`\n  font-size: 16px;\n  font-weight: 400;\n  padding-top: 5px;\n  margin: 0;\n`;\n\nexport const AddInfo = styled.h2`\n  color: inherit;\n  margin: 0;\n  padding-left: 40px;\n`;\n","import PropTypes from 'prop-types';\nimport { format } from 'date-fns';\nimport { POSTER_URL } from 'utils/posterUrl';\nimport {\n  CardWrapper,\n  MovieInfo,\n  Title,\n  Subtitle,\n  Poster,\n  Text,\n  AddInfo,\n} from './MovieCard.styled';\n\nexport const MovieCard = ({\n  movieDetails: {\n    poster_path,\n    genres,\n    overview,\n    release_date,\n    title,\n    vote_average,\n  },\n}) => {\n  const genresNames = genres.map(genre => genre.name).join(', ');\n\n  return (\n    <>\n      <CardWrapper>\n        <Poster src={`${POSTER_URL}${poster_path}`} alt={title} />\n        <MovieInfo>\n          <Title> {title} </Title>\n          <Subtitle>\n            Released by:\n            <Text>{format(new Date(release_date), 'yyyy MMM dd')}</Text>\n          </Subtitle>\n          <Subtitle>User Score: {Math.round(vote_average * 10)}%</Subtitle>\n          <Subtitle>\n            OverView:\n            <Text>{overview}</Text>\n          </Subtitle>\n          <Subtitle>\n            Genres:\n            <Text>{genresNames}</Text>\n          </Subtitle>\n        </MovieInfo>\n      </CardWrapper>\n      <AddInfo>Additional information</AddInfo>\n    </>\n  );\n};\n\nMovieCard.propTypes = {\n  movieDetails: PropTypes.object.isRequired,\n};\n","import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport { NavLink, Link } from 'react-router-dom';\n\nexport const ButtonGoBack = ({ to, children }) => {\n  return <ButtonStyles to={to}>{children}</ButtonStyles>;\n};\n\nButtonGoBack.propTypes = {\n  to: PropTypes.string.isRequired,\n};\n\nexport const ButtonStyles = styled(Link)`\n  font-size: 14px;\n  text-decoration: none;\n  text-align: center;\n  display: inline-block;\n  color: inherit;\n  background-color: rgb(230, 230, 230);\n\n  width: 120px;\n  margin-top: 5px;\n  margin-left: 40px;\n  padding: 5px 10px;\n\n  border-radius: 4px;\n  border: none;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: rgb(210, 210, 210);\n  }\n`;\n\nexport const AddInfoWrapper = styled.div`\n  display: flex;\n  gap: 20px;\n  padding-left: 40px;\n  margin-top: 10px;\n`;\n\nexport const InfoItem = styled(NavLink)`\n  font-size: 18px;\n  text-decoration: none;\n  text-align: center;\n  color: inherit;\n  background-color: rgb(230, 230, 230);\n  padding: 5px 10px;\n  width: 100px;\n  margin: 0;\n\n  border-radius: 4px;\n  border: none;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: rgb(210, 210, 210);\n  }\n`;\n","import { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect, useRef, Suspense } from 'react';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { API } from 'utils';\nimport { Loader } from 'utils';\nimport { MovieCard } from 'components/MovieCard';\nimport { ButtonGoBack, AddInfoWrapper, InfoItem } from './MovieDetails.styled';\n\nexport const MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState();\n\n  const location = useLocation();\n\n  const initialPath = useRef(location.state.from.pathname || null);\n  let backLink = '';\n  if (initialPath.current === '/') {\n    backLink = '/';\n  } else backLink = '/movies';\n\n  useEffect(() => {\n    API.fetchMovieById(movieId)\n      .then(movie => setMovieDetails(movie))\n      .catch(() => toast.error('Sorry, there are not details of this movie'));\n  }, [movieId]);\n\n  return (\n    <>\n      <Suspense fallback={<Loader />}>\n        {movieDetails && <ButtonGoBack to={backLink}>â¬… Go back</ButtonGoBack>}\n        {movieDetails && <MovieCard movieDetails={movieDetails} />}\n        <AddInfoWrapper>\n          <InfoItem to={`/movies/${movieId}/cast`} state={{ from: location }}>\n            Cast\n          </InfoItem>\n          <InfoItem\n            to={`/movies/${movieId}/reviews`}\n            state={{ from: location }}\n          >\n            Reviews\n          </InfoItem>\n        </AddInfoWrapper>\n      </Suspense>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n      <ToastContainer autoClose={3000} />\n    </>\n  );\n};\n","export const POSTER_URL = 'https://image.tmdb.org/t/p/original';\n"],"names":["CardWrapper","styled","Poster","MovieInfo","Title","Subtitle","Text","AddInfo","MovieCard","movieDetails","poster_path","genres","overview","release_date","title","vote_average","genresNames","map","genre","name","join","src","POSTER_URL","alt","format","Date","Math","round","ButtonGoBack","to","children","ButtonStyles","Link","AddInfoWrapper","InfoItem","NavLink","MovieDetails","movieId","useParams","useState","setMovieDetails","location","useLocation","backLink","useRef","state","from","pathname","current","useEffect","API","then","movie","catch","toast","Suspense","fallback","autoClose"],"sourceRoot":""}